# 🌟 Workflow GitHub Actions pour Blunof
# Déploiement automatique de la mini-app Telegram

name: 🚀 Déploiement Blunof

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # 🧪 Tests et vérifications
  test:
    name: 🧪 Tests et Qualité
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Installation des dépendances
        run: npm ci
        
      - name: 🔍 Vérification du code
        run: npm run lint
        
      - name: 🧪 Tests unitaires
        run: npm test -- --coverage --watchAll=false
        
      - name: 🔨 Build de production
        run: npm run build
        
      - name: 📊 Upload des rapports de couverture
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 🚀 Déploiement en staging
  deploy-staging:
    name: 🧪 Déploiement Staging
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Installation des dépendances
        run: npm ci
        
      - name: 🔨 Build de production
        run: npm run build
        
      - name: 🚀 Déploiement sur Netlify (Staging)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          deploy-message: "🚀 Déploiement staging - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_STAGING }}

  # 🚀 Déploiement en production
  deploy-production:
    name: 🚀 Déploiement Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Installation des dépendances
        run: npm ci
        
      - name: 🔨 Build de production
        run: npm run build
        
      - name: 🚀 Déploiement sur Netlify (Production)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          deploy-message: "🚀 Déploiement production - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}
          
      - name: 🔔 Notification Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Blunof déployé en production avec succès!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 📱 Déploiement sur Vercel
  deploy-vercel:
    name: 📱 Déploiement Vercel
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Installation des dépendances
        run: npm ci
        
      - name: 🔨 Build de production
        run: npm run build
        
      - name: 🚀 Déploiement sur Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: '--prod'

  # 🐳 Build et push Docker
  docker:
    name: 🐳 Build Docker
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 🔐 Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 🐳 Build et push Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/blunof:latest
            ${{ secrets.DOCKER_USERNAME }}/blunof:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 📊 Analyse de sécurité
  security:
    name: 🔒 Analyse de sécurité
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 🔧 Installation des dépendances
        run: npm ci
        
      - name: 🔒 Audit de sécurité npm
        run: npm audit --audit-level=moderate
        
      - name: 🔍 Analyse avec Snyk
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 📈 Métriques et monitoring
  metrics:
    name: 📈 Métriques
    needs: [deploy-production, deploy-vercel]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v4
        
      - name: 📊 Génération des métriques
        run: |
          echo "📊 Métriques de déploiement:"
          echo "- Commit: ${{ github.sha }}"
          echo "- Branche: ${{ github.ref }}"
          echo "- Auteur: ${{ github.actor }}"
          echo "- Timestamp: $(date)"
          
      - name: 🔔 Notification de succès
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#metrics'
          text: '📊 Déploiement Blunof terminé - Métriques générées'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
