# üåü Docker Compose pour Blunof
# D√©ploiement complet de la mini-app Telegram

version: '3.8'

services:
  # üì± Application Blunof
  blunof-app:
    build:
      context: .
      target: production
    container_name: blunof-app
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"  # Optionnel pour HTTPS
    volumes:
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro  # Optionnel pour HTTPS
    environment:
      - NODE_ENV=production
    networks:
      - blunof-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # üîÑ Application de d√©veloppement (optionnel)
  blunof-dev:
    build:
      context: .
      target: development
    container_name: blunof-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    networks:
      - blunof-network
    profiles:
      - dev

  # üß™ Tests (optionnel)
  blunof-test:
    build:
      context: .
      target: test
    container_name: blunof-test
    environment:
      - NODE_ENV=test
    networks:
      - blunof-network
    profiles:
      - test

  # üìä Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: blunof-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - blunof-network
    profiles:
      - monitoring

  # üìà Visualisation avec Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: blunof-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - blunof-network
    profiles:
      - monitoring

  # üîç Logs avec ELK Stack (optionnel)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: blunof-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - blunof-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: blunof-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    ports:
      - "5044:5044"
    networks:
      - blunof-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: blunof-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - blunof-network
    profiles:
      - logging

# üåê R√©seau personnalis√©
networks:
  blunof-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üíæ Volumes persistants
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
